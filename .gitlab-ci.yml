# For tips, see: https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/Maven.gitlab-ci.yml

stages:
  - build
  - test
  - release
  - deploy

# parent job shared by all maven jobs
.maven-job:
  image: maven:3-openjdk-17-slim
  variables:
    MAVEN_CLI_OPTS: >-
      --batch-mode 
      --errors 
      --fail-at-end 
      --show-version 
      --no-transfer-progress
    MAVEN_OPTS: >-
      -Dhttps.protocols=TLSv1.2
      -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
      -Dorg.slf4j.simpleLogger.showDateTime=true
      -Djava.awt.headless=true

  # Cache downloaded dependencies and plugins between builds.
  # To keep cache across branches add 'key: "$CI_JOB_NAME"'
  # Be aware that `mvn deploy` will install the built jar into this repository. If you notice your cache size
  # increasing, consider adding `-Dmaven.install.skip=true` to `MAVEN_OPTS` or in `.mvn/maven.config`
  cache:
    #key: ${CI_COMMIT_REF_SLUG} # this should keep the cache for the commit only
    key: ${CI_JOB_NAME} # this should keep the cache between builds
    paths:
      - .m2/repository/

build-maven:
  extends: .maven-job
  stage: build
  script:
    - mvn $MAVEN_CLI_OPTS $MAVEN_OPTS compile
  artifacts:
    name: "Maven target from $CI_JOB_NAME of $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    expire_in: 1 week
    paths:
      - ./*

test-maven:
  extends: .maven-job
  stage: test
  variables:
    MAVEN_PROFILE: ""
  rules:
    - if: $CI_COMMIT_TAG =~ /^v([0-9]+)\.([0-9]+)\.([0-9]+)/
      variables:
        MAVEN_PROFILE: "-PfeatureBranch" # this must match profile id in pom.xml'
    - when: always
  script:
    - echo "mvn $MAVEN_CLI_OPTS $MAVEN_OPTS org.jacoco:jacoco-maven-plugin:prepare-agent $MAVEN_PROFILE verify org.jacoco:jacoco-maven-plugin:report-aggregate"
    - mvn $MAVEN_CLI_OPTS $MAVEN_OPTS org.jacoco:jacoco-maven-plugin:prepare-agent $MAVEN_PROFILE verify org.jacoco:jacoco-maven-plugin:report-aggregate
  artifacts:
    name: "Maven target from $CI_JOB_NAME of $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    paths:
      - ./**/target/
    expire_in: 1 week
    reports:
      junit:
        - ./**/target/surefire-reports/TEST-*.xml

test-coverage-cobertura:
  stage: test
  dependencies:
    - test-maven
  needs: ["test-maven"]
  image: haynes/jacoco2cobertura:1.0.7
  variables:
    GIT_STRATEGY: none
  allow_failure: true
  script:
    # find all modules containing java source files.
    - jacoco_paths=`find * -path "**/src/main/java" -type d | sed -e 's@^@'"$CI_PROJECT_DIR"'/@'`
    - python /opt/cover2cover.py .test-coverage/target/site/jacoco-aggregate/jacoco.xml $jacoco_paths > .test-coverage/target/site/coverage.xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: .test-coverage/target/site/coverage.xml

## This job keeps the main artifacts from the build and publishes them to ottr.xyz.
release-ottrxyz:
  stage: release
  rules:
    - if: $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_TAG =~ /^v([0-9]+)\.([0-9]+)\.([0-9]+)/
  dependencies:
    - test-maven
  variables:
    GIT_STRATEGY: none
  script:
    - cp lutra-cli/target/lutra.jar lutra.jar
    - cp lutra-restapi/target/lutra.war lutra.war
    - apt-get update -qq && apt-get install -y -qq sshpass
    - sshpass -V
    - export SSHPASS=$FTP_PASS # this is available only in protected branches
    - cp lutra.jar lutra-$CI_COMMIT_REF_NAME.jar
    - sshpass -e scp -o stricthostkeychecking=no lutra-$CI_COMMIT_REF_NAME.jar $FTP_HOST:/www.ottr.xyz/downloads/$CI_PROJECT_NAME/ # this will fail if target folder does not exist.
  artifacts:
    expire_in: 2 mos 2 week
    paths:
      - lutra.jar
      - lutra.war

## This job registers a tag as a release in GitLab.
release-gitlab:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG =~ /^v([0-9]+)\.([0-9]+)\.([0-9]+)/
  needs: ["release-ottrxyz"]
  variables:
    GIT_STRATEGY: none
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "running release_job"
  release:                               # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: '$CI_COMMIT_TAG'
    description: 'Release of $CI_PROJECT_NAME $CI_COMMIT_TAG.'
    assets:
      links:
        - name: '$CI_PROJECT_NAME executable JAR file'
          url: 'https://www.ottr.xyz/downloads/$CI_PROJECT_NAME/lutra-$CI_COMMIT_TAG.jar'

# publishing maven artefacts to maven repo.
deploy2sonatype:
  stage: release
  extends: .maven-job
  rules:
    - if: $CI_COMMIT_TAG =~ /^v([0-9]+)\.([0-9]+)\.([0-9]+)/
  before_script:
    - apt-get update -qq && apt-get install -y -qq gnupg
    - mkdir -p $CI_PROJECT_DIR/.m2
    - echo "$SETTINGS_XML" | base64 --decode > $CI_PROJECT_DIR/.m2/settings.xml
    - echo "$SETTINGS_SECURITY_XML_BASE64" | base64 --decode > $CI_PROJECT_DIR/.m2/settings-security.xml
    - echo "$MGS_PRIVATE_KEY" | base64 --decode | gpg --batch --import
  script:
    - mvn deploy $MAVEN_CLI_OPTS --settings $CI_PROJECT_DIR/.m2/settings.xml deploy

### The job deploy2zenodo publishes to zenodo, (minimally) adapted from https://zenodo.org/records/10478977
deploy2zenodo:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG =~ /^v([0-9]+)\.([0-9]+)\.([0-9]+)/
  variables:
    DEPLOY2ZENODO_VERSION: $CI_COMMIT_TAG
    DEPLOY2ZENODO_API_URL: https://zenodo.org/api
    DEPLOY2ZENODO_JSON: "CITATION.json"
    DEPLOY2ZENODO_DEPOSITION_ID: "10954639"
    DEPLOY2ZENODO_UPLOAD: "$CI_PROJECT_NAME-$DEPLOY2ZENODO_VERSION.zip"
    DEPLOY2ZENODO_ADD_IsCompiledBy_DEPLOY2ZENODO: "yes"
    DEPLOY2ZENODO_GET_METADATA: "result.json"
    DEPLOY2ZENODO_SKIP_PUBLISH: "true"
  before_script:
    - apk add --no-cache curl jq py3-pip git
    - pip install cffconvert --break-system-packages
    - publication_date=$(echo "$CI_COMMIT_TIMESTAMP" | grep -Eo "^[0-9]{4}-[0-9]{2}-[0-9]{2}")
    - |
      cffconvert -i CITATION.cff -f zenodo | \
        jq -c '{"metadata": .} | .metadata += {"upload_type": "software"}' | \
        jq -c ".metadata.related_identifiers += [
          {\"relation\": \"isDerivedFrom\",
          \"identifier\": \"$CI_PROJECT_URL\"}] |
          .metadata.version = \"$DEPLOY2ZENODO_VERSION\" |
          .metadata.publication_date = \"$publication_date\"" | \
        tee $DEPLOY2ZENODO_JSON | jq -C .
    - git archive --format zip --output "$DEPLOY2ZENODO_UPLOAD" "$DEPLOY2ZENODO_VERSION"
  artifacts:
    paths:
      - $DEPLOY2ZENODO_JSON
      - $DEPLOY2ZENODO_GET_METADATA


## Following https://blog.callr.tech/building-docker-images-with-gitlab-ci-best-practices/
.build-docker-image:
  stage: release
  image: docker:20
  services:
    - docker:dind
  before_script:
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

# This job creates a new container image, tagging it with the commit sha.
release-build-docker-image:
  extends: .build-docker-image
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_TAG =~ /^v([0-9]+)\.([0-9]+)\.([0-9]+)/
  dependencies:
    - test-maven
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - cd lutra-restapi
    - >
      docker build
      --pull
      --cache-from $CI_REGISTRY_IMAGE:latest
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.url=$CI_PROJECT_URL"
      --label "org.opencontainers.image.created=$CI_JOB_STARTED_AT"
      --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
      --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME"
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

# This job tags already built container images.
release-tag-docker-image:
  extends: .build-docker-image
  needs: ["release-build-docker-image"]
  variables:
    GIT_STRATEGY: none
    IMAGETAG: $CI_COMMIT_REF_SLUG
  rules:
    - if: $CI_COMMIT_TAG =~ /^v([0-9]+)\.([0-9]+)\.([0-9]+)/
    - if: $CI_COMMIT_BRANCH == "master"
      variables:
        IMAGETAG: "latest"
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$IMAGETAG
    - docker push $CI_REGISTRY_IMAGE:$IMAGETAG


include:
  - template: Jobs/Code-Quality.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml
  - remote: 'https://gitlab.com/deploy2zenodo/deploy2zenodo/-/releases/permalink/latest/downloads/deploy2zenodo.yaml'
